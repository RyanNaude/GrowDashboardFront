[{"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\index.js":"1","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\App.js":"2","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\store.js":"3","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\root-reducer.js":"4","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\theme.js":"5","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\calander.js":"6","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\enviroment.js":"7","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\gallery.js":"8","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\envSettings.js":"9","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\costManagement.js":"10","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\home.js":"11","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\Header.js":"12","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.actions.js":"13","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.selector.js":"14","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.selector.js":"15","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.reducer.jsx":"16","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.reducer.jsx":"17","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.types.js":"18","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.types.js":"19","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputCust.js":"20","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\DatePick.js":"21","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputLabelCust.js":"22","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\SelectCust.js":"23","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\unsigned.js":"24","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.actions.js":"25","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\signup.component.js":"26","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\signin.component.js":"27","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputMultiCust.js":"28","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\ButtonCust.js":"29","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\newJournal.js":"30","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\costManagementUi\\newDevice.js":"31","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\weatherUi\\weatherSummary.js":"32","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calanderNewEntry.js":"33","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\currentJournals.js":"34","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\costManagementUi\\costOfElec.js":"35","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calenderMonth.js":"36","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\weatherUi\\weather.js":"37","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\editJournal.js":"38","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calanderEntry.js":"39","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\galleryUi\\galleryChipGroup.js":"40"},{"size":391,"mtime":1634626894102,"results":"41","hashOfConfig":"42"},{"size":2804,"mtime":1640344772175,"results":"43","hashOfConfig":"42"},{"size":270,"mtime":1634626894106,"results":"44","hashOfConfig":"42"},{"size":240,"mtime":1634626894103,"results":"45","hashOfConfig":"42"},{"size":550,"mtime":1636436395879,"results":"46","hashOfConfig":"42"},{"size":3651,"mtime":1640930165418,"results":"47","hashOfConfig":"42"},{"size":1863,"mtime":1640943792481,"results":"48","hashOfConfig":"42"},{"size":3946,"mtime":1640943841026,"results":"49","hashOfConfig":"42"},{"size":1211,"mtime":1640325592748,"results":"50","hashOfConfig":"42"},{"size":3794,"mtime":1641194300631,"results":"51","hashOfConfig":"42"},{"size":5184,"mtime":1640943784912,"results":"52","hashOfConfig":"42"},{"size":9617,"mtime":1640325641840,"results":"53","hashOfConfig":"42"},{"size":521,"mtime":1634626894106,"results":"54","hashOfConfig":"42"},{"size":638,"mtime":1634626894107,"results":"55","hashOfConfig":"42"},{"size":729,"mtime":1640692577318,"results":"56","hashOfConfig":"42"},{"size":919,"mtime":1634626894107,"results":"57","hashOfConfig":"42"},{"size":830,"mtime":1640692587256,"results":"58","hashOfConfig":"42"},{"size":206,"mtime":1634626894108,"results":"59","hashOfConfig":"42"},{"size":219,"mtime":1640692571907,"results":"60","hashOfConfig":"42"},{"size":985,"mtime":1640770043415,"results":"61","hashOfConfig":"42"},{"size":971,"mtime":1640771411300,"results":"62","hashOfConfig":"42"},{"size":288,"mtime":1640672080016,"results":"63","hashOfConfig":"42"},{"size":1163,"mtime":1640771422558,"results":"64","hashOfConfig":"42"},{"size":860,"mtime":1634626894101,"results":"65","hashOfConfig":"42"},{"size":564,"mtime":1640692594023,"results":"66","hashOfConfig":"42"},{"size":5567,"mtime":1641194256641,"results":"67","hashOfConfig":"42"},{"size":6097,"mtime":1641194273853,"results":"68","hashOfConfig":"42"},{"size":927,"mtime":1640770034462,"results":"69","hashOfConfig":"42"},{"size":655,"mtime":1640850509787,"results":"70","hashOfConfig":"42"},{"size":12245,"mtime":1640943752918,"results":"71","hashOfConfig":"42"},{"size":9117,"mtime":1641214071402,"results":"72","hashOfConfig":"42"},{"size":10041,"mtime":1641194172205,"results":"73","hashOfConfig":"42"},{"size":7162,"mtime":1640930602173,"results":"74","hashOfConfig":"42"},{"size":10320,"mtime":1640943539945,"results":"75","hashOfConfig":"42"},{"size":5515,"mtime":1640943955718,"results":"76","hashOfConfig":"42"},{"size":4988,"mtime":1641193001571,"results":"77","hashOfConfig":"42"},{"size":2789,"mtime":1640939823596,"results":"78","hashOfConfig":"42"},{"size":13097,"mtime":1641193044279,"results":"79","hashOfConfig":"42"},{"size":2429,"mtime":1640929776693,"results":"80","hashOfConfig":"42"},{"size":1679,"mtime":1640929867897,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1qa6l67",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\index.js",[],["171","172"],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\App.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\store.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\root-reducer.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\theme.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\calander.js",["173"],"import React, { useEffect, useState } from \"react\";\r\n\r\n//Material UI Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n//Component Import\r\nimport Unsigned from \"./ui/unsigned\";\r\nimport CalanderMonth from \"./ui/calenderMonth\";\r\nimport CalanderEntry from \"./ui/calanderEntry\";\r\nimport CalanderNewEntry from \"./ui/calanderNewEntry\";\r\n\r\n//Redux imports\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTokenState } from \"../redux/user/user.selector\";\r\n\r\n//Custom useStyles\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainPageStyle: {\r\n    marginTop: \"6em\",\r\n    width: \"100%\",\r\n    border: \"0px solid\",\r\n  },\r\n  mainPageSub: {\r\n    border: \"0px solid black\",\r\n  },\r\n}));\r\n\r\nconst titleArray = [\"Diam\", \"Arcu\", \"Purus\", \"Lectus\"];\r\nconst timeArray = [\r\n  \"17:00 | 18:00\",\r\n  \"13:00 | 15:00\",\r\n  \"08:00 | 13:00\",\r\n  \"11:00 | 17:00\",\r\n];\r\nconst dateArray = [\r\n  \"1 JAN | 2021\",\r\n  \"4 JAN | 2021\",\r\n  \"13 JAN | 2021\",\r\n  \"22 JAN | 2021\",\r\n];\r\nconst bodyArray = [\r\n  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\r\n  \"Pretium fusce id velit ut tortor pretium. Mauris rhoncus aenean vel elit. Penatibus et magnis dis parturient montes nascetur ridiculus mus.\",\r\n  \"Quam pellentesque nec nam aliquam sem. Pellentesque elit ullamcorper dignissim cras tincidunt.\",\r\n  \"Sed risus ultricies tristique nulla aliquet enim tortor at. Etiam tempor orci eu lobortis elementum nibh.\",\r\n];\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nexport default function Calander(props) {\r\n  const classes = useStyles();\r\n  //Get Global State\r\n  const tokenState = useSelector(selectTokenState);\r\n\r\n  const [newCalEntry, setNewCalEntry] = useState(false);\r\n  const [yearState, setYearState] = useState();\r\n  const [monthState, setMonthState] = useState();\r\n\r\n  const d = new Date();\r\n  var monthCnt = d.getMonth();\r\n  var month = months[monthCnt];\r\n  var year = d.getFullYear();\r\n\r\n  useEffect(() => {\r\n    setYearState(year);\r\n    setMonthState(month);\r\n  },[]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"column\" className={classes.mainPageStyle}>\r\n        {tokenState ? (\r\n          <Grid item container>\r\n           \r\n\r\n            <Grid item style={{ marginTop: \"0.0em\", width: \"100%\" }}>\r\n              {newCalEntry ? (\r\n                <CalanderNewEntry\r\n                  newCalEntry={newCalEntry}\r\n                  setNewCalEntry={setNewCalEntry}\r\n                />\r\n              ) :  <Grid item>\r\n              <CalanderMonth\r\n                setNewCalEntry={setNewCalEntry}\r\n                newCalEntry={newCalEntry}\r\n                yearState={yearState}\r\n                setYearState={setYearState}\r\n                monthState={monthState}\r\n                setMonthState={setMonthState}\r\n                months={months}\r\n              />\r\n            </Grid>}\r\n            </Grid>\r\n            <Grid item style={{ marginTop: \"0.0em\" }}>\r\n              {timeArray.map((time, index) => (\r\n                <CalanderEntry\r\n                  key={index}\r\n                  time={time}\r\n                  date={dateArray[index]}\r\n                  title={titleArray[index]}\r\n                  body={bodyArray[index]}\r\n                />\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <Grid item>\r\n            <Unsigned />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\enviroment.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\gallery.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\envSettings.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\costManagement.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\home.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\Header.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.actions.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.selector.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.selector.js",["174","175"],"import { createSelector } from \"reselect\";\r\n\r\nconst selectNewJournal = (state) => (state.siteNav);\r\n\r\n// const selectUser = (state) => state.user;\r\n// const selectSignIn = (state) => state.user;\r\n// const selectSignUp = (state) => state.user;\r\n\r\n// export const selectDispNewJournal = createSelector(\r\n//   [selectNewJournal],\r\n//   (siteNav) => siteNav.displayNewJournal\r\n// );\r\n\r\n// export const selectCurrentUser = createSelector(\r\n//   [selectUser],\r\n//   (user) => user.currentUser\r\n// );\r\n\r\n// export const selectSignInState = createSelector(\r\n//   [selectSignIn],\r\n//   (user) => user.signInState\r\n// );\r\n\r\n// export const selectSignUpState = createSelector(\r\n//   [selectSignUp],\r\n//   (user) => user.signUpState\r\n// );\r\n",["176","177"],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.reducer.jsx",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.reducer.jsx",["178"],"import userActionTypes from \"./siteNav.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  displayNewJournal: false,\r\n  // signInState: false,\r\n  // signUpState: false,\r\n};\r\n\r\nconst siteNavReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    // case userActionTypes.DISP_NEW_JOURNAL:\r\n    //   return {\r\n    //     ...state,\r\n    //     displayNewJournal: action.payload,\r\n    //     error: null,\r\n    //   };\r\n\r\n    // case userActionTypes.SET_SIGN_IN:\r\n    //   return {\r\n    //     ...state,\r\n    //     signInState: action.payload,\r\n    //     error: null,\r\n    //   };\r\n\r\n    // case userActionTypes.SET_SIGN_UP:\r\n    //   return {\r\n    //     ...state,\r\n    //     signUpState: action.payload,\r\n    //     error: null,\r\n    //   };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default siteNavReducer;\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\user\\user.types.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.types.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputCust.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\DatePick.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputLabelCust.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\SelectCust.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\unsigned.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\redux\\siteNav\\siteNav.actions.js",["179"],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\signup.component.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\signin.component.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\InputMultiCust.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\component\\ButtonCust.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\newJournal.js",["180","181","182"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport Config from \"../../../json/select.json\";\r\n\r\n//Material UI Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Chip from \"@material-ui/core/chip\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Custom component import\r\nimport ButtonCust from \"../../component/ButtonCust\";\r\nimport InputCust from \"../../component/InputCust\";\r\nimport InputMultiCust from \"../../component/InputMultiCust\";\r\nimport SelectCust from \"../../component/SelectCust\";\r\n\r\n//Redux imports\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCurrentUser } from \"../../../redux/user/user.selector\";\r\n\r\n//Custom useStyles\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainPageStyle: {\r\n    marginTop: \"6em\",\r\n    width: \"100%\",\r\n    border: \"0px solid\",\r\n  },\r\n  journalInput: {\r\n    margin: \"0\",\r\n    marginTop: \"3px\",\r\n  },\r\n  mainPageSub: {\r\n    border: \"0px solid black\",\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    backgroundColor: \"#ebffdb\",\r\n    marginTop: \"0.5em\",\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"36.25%\",\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    marginLeft: \"auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  avatar: {},\r\n  journalDescTitle: {\r\n    paddingBottom: \"0.5em\",\r\n    color: \"#000\",\r\n    opacity: \"0.65\",\r\n  },\r\n  journalDesc: {\r\n    width: \"95%\",\r\n    border: `0px solid ${theme.palette.common.blue}`,\r\n    borderRadius: \"3pt\",\r\n    backgroundColor: theme.palette.secondary.light,\r\n    paddingLeft: \"3px\",\r\n    paddingRight: \"3px\",\r\n  },\r\n  journalButton: {\r\n    margin: \"1em\",\r\n  },\r\n  submitGrid: {},\r\n  curJournals: { marginTop: \"1em\", width: \"100%\" },\r\n  curJournalsSpace: {\r\n    width: \"100%\",\r\n  },\r\n  curJournalsSpace80: {\r\n    width: \"80%\",\r\n    marginLeft: \"4em\",\r\n  },\r\n  curJournalSubheader: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n    backgroundColor: theme.palette.primary.light,\r\n    fontSize: \"12pt\",\r\n  },\r\n  gridItemStyle: {\r\n    marginTop: \"0.5em\",\r\n  },\r\n  typogGrid: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default function NewJournal(props) {\r\n  const classes = useStyles();\r\n\r\n  //Get Global State\r\n  const currentUser = useSelector(selectCurrentUser);\r\n\r\n  //Setup Local State\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [soilTypeState, setSoilTypeState] = useState([]);\r\n  const [fullJournal, setFullJournal] = useState({\r\n    jName: \"\",\r\n    jDesc: \"\",\r\n    roomType: \"\",\r\n    waterType: \"\",\r\n    vegLight: \"\",\r\n    flowLight: \"\",\r\n    growMedium: \"\",\r\n    vegWatt: \"\",\r\n    flowerWatt: \"\",\r\n    username: currentUser,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // getJournals();\r\n  }, []);\r\n\r\n  //Updating journals\r\n  const updateJournal = (event) => {\r\n    console.log(\"UPDATE JOURNAL\");\r\n    // setFullJournal({ ...fullJournal, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const cancelNewJournal = () => {\r\n    setExpanded(false);\r\n    props.setDispNewJournal(!props.dispNewJournal);\r\n    props.setDispCarousel(!props.dispCarousel);\r\n    props.setDispWeather(!props.dispWeather);\r\n  };\r\n\r\n  //Journal Data Processing\r\n  //Requesting -  Create new journal on backend\r\n  const createJournal = async () => {\r\n    console.log(fullJournal.username);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        journalNameField: fullJournal.jName,\r\n        journalDescField: fullJournal.jDesc,\r\n        journalRoomType: fullJournal.roomType,\r\n        journalWaterType: fullJournal.waterType,\r\n        journalVegLight: fullJournal.vegLight,\r\n        journalFlowLight: fullJournal.flowLight,\r\n        journalGrowMedium: soilTypeState,\r\n        journalVegWatt: fullJournal.vegWatt,\r\n        journalFlowerWatt: fullJournal.flowerWatt,\r\n        journalUsername: fullJournal.username,\r\n      }),\r\n    };\r\n    fetch(\"http://localhost:4000/journal/createJournal\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((response) => console.log(response))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  const handleChangeMultiple = (event) => {\r\n    setSoilTypeState(event.target.value);\r\n  };\r\n\r\n  const updateState = (event) => {\r\n    setFullJournal({\r\n      ...fullJournal,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent style={{ border: \"0px solid\", padding: \"0\" }}>\r\n        <Grid container direction=\"row\" style={{ width: \"100%\" }}>\r\n          <Grid item className={classes.typogGrid}>\r\n            <Typography\r\n              variant=\"h6\"\r\n              style={{ fontWeight: \"normal\", paddingLeft: \"0.5em\" }}\r\n            >\r\n              Add Journal\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <InputCust\r\n              id={\"newJournalTitle\"}\r\n              label={\"New Journal Name\"}\r\n              name={\"jName\"}\r\n              helperText={\"\"}\r\n              inputWidth={\"96%\"}\r\n              value={fullJournal.jName}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item className={classes.gridItemStyle} xs={6}>\r\n            <SelectCust\r\n              name=\"roomType\"\r\n              label=\"Room Type\"\r\n              labelId=\"watering_type\"\r\n              inputWidth=\"100%\"\r\n              menuArr={Config.roomType}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={fullJournal.roomType}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid item className={classes.gridItemStyle} xs={6}>\r\n            <SelectCust\r\n              name=\"waterType\"\r\n              label=\"Watering Type\"\r\n              labelId=\"watering_type\"\r\n              inputWidth=\"100%\"\r\n              menuArr={Config.waterType}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={fullJournal.waterType}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle}>\r\n            <Grid item xs={6}>\r\n              <InputCust\r\n                id={\"newJournalTitle\"}\r\n                label={\"Veg Wattage\"}\r\n                name={\"vegWatt\"}\r\n                helperText={\"\"}\r\n                inputWidth={\"96%\"}\r\n                value={fullJournal.vegWatt}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                type=\"number\"\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectCust\r\n                name=\"vegLight\"\r\n                label=\"Veg Light Type\"\r\n                inputWidth=\"100%\"\r\n                menuArr={Config.lightType}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                value={fullJournal.vegLight}\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle}>\r\n            <Grid item xs={6}>\r\n              <InputCust\r\n                id={\"newJournalTitle\"}\r\n                label={\"Flower Wattage\"}\r\n                name={\"flowerWatt\"}\r\n                helperText={\"\"}\r\n                inputWidth={\"96%\"}\r\n                value={fullJournal.flowerWatt}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                type=\"number\"\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectCust\r\n                name=\"flowLight\"\r\n                label=\"Flower Light Type\"\r\n                inputWidth=\"100%\"\r\n                menuArr={Config.lightType}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                value={fullJournal.flowLight}\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item className={classes.gridItemStyle} xs={12}>\r\n            <FormControl\r\n              className={classes.formControl}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <InputLabel id=\"soilTypeLabel\">Grow Medium</InputLabel>\r\n              <Select\r\n                labelId=\"soilTypeLabel\"\r\n                id=\"mutipleChip\"\r\n                multiple\r\n                value={soilTypeState}\r\n                onChange={handleChangeMultiple}\r\n                input={<Input id=\"selectMultipleChip\" />}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {soilTypeState.map((value) => (\r\n                      <Chip\r\n                        key={value}\r\n                        label={value}\r\n                        className={classes.chip}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Config.soilType.map((soil) => (\r\n                  <MenuItem key={soil} value={soil}>\r\n                    {soil}\r\n                  </MenuItem>\r\n                ))}\r\n                Config.lightType\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle} xs={12}>\r\n            <InputMultiCust\r\n              name=\"jDesc\"\r\n              inputWidth=\"100%\"\r\n              id={\"entryNote\"}\r\n              label={\"Journal Description\"}\r\n              helperText={\"\"}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={fullJournal.jDesc}\r\n              placeholder=\"Short description of journal...\"\r\n              inputWidth={\"95%\"}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            className={classes.submitGrid}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item>\r\n              <ButtonCust\r\n                butName=\"Create\"\r\n                buttonWidth=\"75%\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={createJournal}\r\n                disabled={\r\n                  fullJournal.jName === \"\" ||\r\n                  fullJournal.jDesc === \"\" ||\r\n                  fullJournal.roomType === \"\" ||\r\n                  fullJournal.waterType === \"\" ||\r\n                  fullJournal.vegLight === \"\" ||\r\n                  fullJournal.flowLight === \"\" ||\r\n                  soilTypeState === \"\" ||\r\n                  fullJournal.vegWatt === \"\" ||\r\n                  fullJournal.flowerWatt === \"\" ||\r\n                  fullJournal.username === \"\"\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <ButtonCust\r\n                butName=\"Cancel\"\r\n                buttonWidth=\"75%\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={cancelNewJournal}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\costManagementUi\\newDevice.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\weatherUi\\weatherSummary.js",["183"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport Weather from \"./weather\";\r\n\r\n//Material UI Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport sunRise from \"../../../assets/sunrise.png\";\r\nimport sunSet from \"../../../assets/sunset.png\";\r\n\r\n//Custom useStyles\r\nconst useStyles = makeStyles((theme) => ({\r\n  weatSumm: {\r\n    backgroundColor: \"#d6ffb5\",\r\n    marginTop: \"0.5em\",\r\n    marginBottom: \"0.5em\",\r\n  },\r\n  summMaxTemp: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"15pt\",\r\n  },\r\n  weekDay: {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"10pt\",\r\n  },\r\n  summDate: {\r\n    fontSize: \"9pt\",\r\n  },\r\n  image: {\r\n    maxHeight: \"90%\",\r\n    maxWidth: \"90%\",\r\n  },\r\n  dataPlane: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n}));\r\n\r\nfunction convertDate(unixDate) {\r\n  var millisecond = unixDate;\r\n  var date = new Date(millisecond * 1000);\r\n  return date.toString();\r\n}\r\n\r\nexport default function WeatherSummary(props) {\r\n  const classes = useStyles();\r\n  //Local State\r\n  const [weather, setWeather] = useState(null);\r\n  // const [weatherRefresh, setWeatherRefresh] = useState(false);\r\n  const [ref, setRef] = useState(false);\r\n\r\n  const [weatherFields, setWeatherFields] = useState({\r\n    weatherMinField: \"\",\r\n    weatherMaxField: \"\",\r\n    weatherDateField: \"\",\r\n    weatherTempField: \"\",\r\n    weatherHumField: \"\",\r\n    weatherSunUpField: \"\",\r\n    weatherSunDownField: \"\",\r\n    weatherWindSpeedField: \"\",\r\n    weatherWindDegField: \"\",\r\n    weatherIcon: \"\",\r\n    weatherAPI: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    getWeather();\r\n  }, []);\r\n\r\n  var lon = \"\";\r\n  var lat = \"\";\r\n  var url = \"\";\r\n  const getWeather = async () => {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition(function (position) {\r\n        lat = position.coords.latitude;\r\n        lon = position.coords.longitude;\r\n        url =\r\n          \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\r\n          lat +\r\n          \"&lon=\" +\r\n          lon +\r\n          \"&units=metric&exclude=hourly,minutely&appid=\";\r\n\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            weatherAPI: url,\r\n          }),\r\n        };\r\n\r\n        fetch(\"http://localhost:4000/weather/currentWeather\", requestOptions)\r\n          .then((response) => response.json())\r\n          .then((response) => {\r\n            setWeather(response);\r\n\r\n            var stringDate = convertDate(response.current.dt);\r\n            var dispDate =\r\n              stringDate.substring(0, 3) +\r\n              \" \" +\r\n              stringDate.substring(8, 10) +\r\n              \" \" +\r\n              stringDate.substring(4, 7) +\r\n              \" \" +\r\n              stringDate.substring(11, 15);\r\n\r\n            stringDate = convertDate(response.current.sunrise);\r\n            var sunUp = stringDate.substring(16, 21);\r\n            stringDate = convertDate(response.current.sunset);\r\n            var sunDown = stringDate.substring(16, 21);\r\n\r\n            const todayWeather = response.daily[0];\r\n\r\n            var minTemp = Math.round(Number(todayWeather.temp.min));\r\n            var maxTemp = Math.round(Number(todayWeather.temp.max));\r\n\r\n            var temp = Math.round(Number(response.current.temp));\r\n            var windSpeed = response.current.wind_speed;\r\n            var d2d = require(\"degrees-to-direction\");\r\n            var windDeg = d2d(response.current.wind_deg);\r\n            var humidity = response.current.humidity;\r\n\r\n            var iconCode = response.current.weather[0];\r\n\r\n            var iconUrl =\r\n              \"https://openweathermap.org/img/wn/\" + iconCode.icon + \"@2x.png\";\r\n\r\n            setWeatherFields({\r\n              ...weatherFields,\r\n              weatherDateField: dispDate,\r\n              weatherSunUpField: sunUp,\r\n              weatherSunDownField: sunDown,\r\n              weatherMinField: minTemp,\r\n              weatherMaxField: maxTemp,\r\n              weatherTempField: temp,\r\n              weatherHumField: humidity,\r\n              weatherWindSpeedField: windSpeed,\r\n              weatherWindDegField: windDeg,\r\n              weatherIcon: iconUrl,\r\n            });\r\n            setRef(true);\r\n          })\r\n          .catch((error) => console.log(error));\r\n      });\r\n    } else {\r\n      console.log(\"Not Available\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={classes.weatSumm}\r\n      style={{ borderRadius: \"3pt\" }}\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        xs={4}\r\n        style={{ padding: \"0.2em\", borderRadius: \"3pt\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          style={{ padding: \"0.2em\", borderRadius: \"3pt\" }}\r\n          className={classes.dataPlane}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Typography>{weatherFields.weatherDateField}</Typography>\r\n          </Grid>\r\n          <Grid item container xs={12}>\r\n            <Grid xs={6}>\r\n              <Typography style={{ fontSize: \"22px\", fontWeight: \"normal\" }}>\r\n                {weatherFields.weatherTempField}\r\n                <span style={{ fontSize: \"x-small\" }}>&#8451;</span>\r\n              </Typography>\r\n            </Grid>\r\n            <Divider style={{}} />\r\n            <Grid item container xs={6} justifyContent=\"flex-end\">\r\n              <Typography style={{ fontSize: \"22px\", fontWeight: \"normal\" }}>\r\n                {weatherFields.weatherHumField} %\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container>\r\n            <Grid item container xs={6} alignItems=\"flex-end\">\r\n              <ExpandMoreIcon style={{ border: \"0px solid\" }} />\r\n              <Typography style={{ fontSize: \"14px\" }}>Min</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"flex-end\"\r\n              alignItems=\"flex-end\"\r\n              xs={6}\r\n            >\r\n              <ExpandLessIcon />\r\n              <Typography style={{ fontSize: \"14px\" }}>Max</Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container style={{ border: \"0pt solid\" }}>\r\n            <Grid\r\n              item\r\n              container\r\n              xs={6}\r\n              className={classes.dataPlane}\r\n              justifyContent=\"flex-start\"\r\n            >\r\n              <Typography>\r\n                {weatherFields.weatherMinField}\r\n                <span style={{ fontSize: \"x-small\" }}>&#8451;</span>{\" \"}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              xs={6}\r\n              justifyContent=\"flex-end\"\r\n              className={classes.dataPlane}\r\n            >\r\n              <Typography>\r\n                {weatherFields.weatherMaxField}\r\n                <span style={{ fontSize: \"x-small\" }}>&#8451;</span>{\" \"}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container xs={4} alignItems=\"center\" justifyContent=\"center\">\r\n        <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\r\n          Weather\r\n        </Typography>\r\n        <Typography style={{ fontWeight: \"bold\", fontSize: \"15pt\" }}>\r\n          Summary\r\n        </Typography>\r\n        <img\r\n          src={weatherFields.weatherIcon}\r\n          className={classes.image}\r\n          alt=\"fireSpot\"\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        xs={4}\r\n        style={{ padding: \"0.2em\", borderRadius: \"3pt\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          style={{ padding: \"0.2em\", borderRadius: \"3pt\" }}\r\n          className={classes.dataPlane}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Typography>\r\n              <span style={{ fontWeight: \"bold\" }}>Wind Speed</span>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography>{weatherFields.weatherWindSpeedField} km</Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography>\r\n              <span style={{ fontWeight: \"bold\" }}>Direction:</span>{\" \"}\r\n              {weatherFields.weatherWindDegField}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            xs={12}\r\n          >\r\n            <Grid item container xs={6} justifyContent=\"flex-start\">\r\n              <img src={sunRise} className={classes.image} alt=\"fireSpot\" />\r\n            </Grid>\r\n            <Grid item container xs={6} justifyContent=\"flex-end\">\r\n              <img src={sunSet} className={classes.image} alt=\"fireSpot\" />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            xs={12}\r\n          >\r\n            <Grid item container xs={6} justifyContent=\"flex-start\">\r\n              <Typography>{weatherFields.weatherSunUpField}</Typography>{\" \"}\r\n            </Grid>\r\n            <Grid item container xs={6} justifyContent=\"flex-end\">\r\n              <Typography>{weatherFields.weatherSunDownField} </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {props.pageSource === \"ENV\" ? (\r\n        <Grid item container justifyContent=\"space-evenly\">\r\n          {ref\r\n            ? weather.daily.map((day, i) => (\r\n                <Grid item key={i} xs={3}>\r\n                  <Weather day={day} convertDate={convertDate} />\r\n                </Grid>\r\n              ))\r\n            : null}\r\n        </Grid>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calanderNewEntry.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\currentJournals.js",["184","185","186"],"import React, { useEffect, useState } from \"react\";\r\n\r\n//Material UI Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Carousel from \"react-material-ui-carousel\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Import Custom Components\r\nimport ButtonCust from \"../../component/ButtonCust\";\r\n\r\n//Custom useStyles\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"3em\",\r\n    border: \"1px solid\",\r\n  },\r\n  CheckButton: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    top: \"calc(50% - 20px) !important\",\r\n    transition: \"40ms\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      opacity: \"0.6 !important\",\r\n    },\r\n    height: \"25px\",\r\n    width: \"100%\",\r\n  },\r\n  paperStyle: {\r\n    backgroundColor: \"#d6ffb5\",\r\n    marginTop: \"0.5em\",\r\n  },\r\n  journalTitle: {\r\n    width: \"90%\",\r\n  },\r\n  journalAddIcon: {\r\n    width: \"10%\",\r\n  },\r\n  journalIcon: {\r\n    marginRight: \"3px\",\r\n    marginTop: \"3px\",\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  journalDesc: {},\r\n  buttonGrid: { marginTop: \"0.5em\" },\r\n}));\r\n\r\nexport default function CurrentJournals(props) {\r\n  const classes = useStyles();\r\n\r\n  //Get Local State\r\n  const [activeJournals, setActiveJournals] = useState([]);\r\n  const [fullJournal, setFullJournal] = useState({\r\n    jName: \"\",\r\n    jDesc: \"\",\r\n    roomType: \"\",\r\n    waterType: \"\",\r\n    vegLight: \"\",\r\n    flowLight: \"\",\r\n    growMedium: \"\",\r\n  });\r\n\r\n  //Requesting - All journals from backend\r\n  const getJournals = async () => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        journalNameField: fullJournal.jName,\r\n        journalDescField: fullJournal.jDesc,\r\n        journalRoomType: fullJournal.roomType,\r\n        journalWaterType: fullJournal.waterType,\r\n        journalVegLight: fullJournal.vegLight,\r\n        journalFlowLight: fullJournal.flowLight,\r\n        journalGrowMedium: fullJournal.growMedium,\r\n      }),\r\n    };\r\n    fetch(\"http://localhost:4000/journal/journalGet\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((response) => setActiveJournals(response))\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const togNewJournalDisplay = () => {\r\n    props.setDispNewJournal(!props.dispNewJournal);\r\n    props.setDispCarousel(!props.dispCarousel);\r\n    props.setDispWeather(!props.dispWeather);\r\n  };\r\n\r\n  function selectJournal(i) {\r\n    props.setFullSelectedJournal({\r\n      ...props.fullSelectedJournal,\r\n      description: activeJournals[i].description,\r\n      flowLight: activeJournals[i].flowLight,\r\n      flowerWatt: activeJournals[i].flowerWatt,\r\n      growMedium: activeJournals[i].growMedium,\r\n      journalUsername: activeJournals[i].journalUsername,\r\n      name: activeJournals[i].name,\r\n      roomType: activeJournals[i].roomType,\r\n      vegLight: activeJournals[i].vegLight,\r\n      vegWatt: activeJournals[i].vegWatt,\r\n      waterType: activeJournals[i].waterType,\r\n      id: activeJournals[i]._id,\r\n    });\r\n    props.setEditJournal(!props.editJournal);\r\n    props.setDispCarousel(!props.dispCarousel);\r\n    props.setDispWeather(!props.dispWeather);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getJournals();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item container>\r\n        <Carousel next={(next, active) => {}} prev={(prev, active) => {}}>\r\n          {activeJournals.map(\r\n            (item, index) => (\r\n              console.log(item),\r\n              (\r\n                <Paper className={classes.paperStyle} key={index}>\r\n                  <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    xs={12}\r\n                    style={{ padding: \"0.3em\" }}\r\n                  >\r\n                    <Grid item container alignItems=\"flex-start\" xs={12}>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        alignItems=\"center\"\r\n                        className={classes.journalTitle}\r\n                        style={{ paddingLeft: \"0.5em\" }}\r\n                      >\r\n                        <Typography variant=\"h6\">{item.name}</Typography>\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        className={classes.journalAddIcon}\r\n                        justifyContent=\"flex-end\"\r\n                      >\r\n                        <IconButton\r\n                          className={classes.journalIcon}\r\n                          style={{ zIndex: 1 }}\r\n                          onClick={() => togNewJournalDisplay()}\r\n                        >\r\n                          <AddCircleOutlineIcon />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      direction=\"row\"\r\n                      className={classes.journalDesc}\r\n                      xs={12}\r\n                    >\r\n                      <Grid item xs={12} style={{ marginBottom: \"0.5em \" }}>\r\n                        <Typography>{item.description}</Typography>\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Room Type\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography>{item.roomType}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Water Type\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography>{item.waterType}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Veg Watt\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography> {item.vegWatt}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Veg Light\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography>{item.vegLight}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Flower Watt\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography>{item.flowerWatt}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <Grid item xs={6}>\r\n                          <Typography>\r\n                            <span\r\n                              style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                            >\r\n                              Flower Light\r\n                            </span>\r\n                          </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Typography>{item.flowLight}</Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item xs={12}>\r\n                        <Typography>\r\n                          <span\r\n                            style={{ fontWeight: \"bold\", fontSize: \"10pt\" }}\r\n                          >\r\n                            Grow Medium\r\n                          </span>{\" \"}\r\n                          {item.growMedium}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      direction=\"container\"\r\n                      justifyContent=\"center\"\r\n                      xs={12}\r\n                    >\r\n                      <ButtonCust\r\n                        butName=\"Select\"\r\n                        buttonWidth=\"75%\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => selectJournal(index)}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Paper>\r\n              )\r\n            )\r\n          )}\r\n        </Carousel>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\costManagementUi\\costOfElec.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calenderMonth.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\weatherUi\\weather.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\journalUi\\editJournal.js",["187","188"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport Config from \"../../../json/select.json\";\r\n\r\n//Material UI Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Chip from \"@material-ui/core/chip\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Custom component import\r\nimport ButtonCust from \"../../component/ButtonCust\";\r\nimport InputCust from \"../../component/InputCust\";\r\nimport InputMultiCust from \"../../component/InputMultiCust\";\r\nimport SelectCust from \"../../component/SelectCust\";\r\n\r\n//Redux imports\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCurrentUser } from \"../../../redux/user/user.selector\";\r\n\r\n//Custom useStyles\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainPageStyle: {\r\n    marginTop: \"6em\",\r\n    width: \"100%\",\r\n    border: \"0px solid\",\r\n  },\r\n  journalInput: {\r\n    margin: \"0\",\r\n    marginTop: \"3px\",\r\n  },\r\n  mainPageSub: {\r\n    border: \"0px solid black\",\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    backgroundColor: \"#ebffdb\",\r\n    marginTop: \"0.5em\",\r\n  },\r\n  media: {\r\n    height: 0,\r\n    paddingTop: \"36.25%\",\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    marginLeft: \"auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  avatar: {},\r\n  journalDescTitle: {\r\n    paddingBottom: \"0.5em\",\r\n    color: \"#000\",\r\n    opacity: \"0.65\",\r\n  },\r\n  journalDesc: {\r\n    width: \"95%\",\r\n    border: `0px solid ${theme.palette.common.blue}`,\r\n    borderRadius: \"3pt\",\r\n    backgroundColor: theme.palette.secondary.light,\r\n    paddingLeft: \"3px\",\r\n    paddingRight: \"3px\",\r\n  },\r\n  journalButton: {\r\n    margin: \"1em\",\r\n  },\r\n  submitGrid: {},\r\n  curJournals: { marginTop: \"1em\", width: \"100%\" },\r\n  curJournalsSpace: {\r\n    width: \"100%\",\r\n  },\r\n  curJournalsSpace80: {\r\n    width: \"80%\",\r\n    marginLeft: \"4em\",\r\n  },\r\n  curJournalSubheader: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n    backgroundColor: theme.palette.primary.light,\r\n    fontSize: \"12pt\",\r\n  },\r\n  gridItemStyle: {\r\n    marginTop: \"0.5em\",\r\n  },\r\n  typogGrid: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nexport default function EditJournal(props) {\r\n  const classes = useStyles();\r\n\r\n  //Get Global State\r\n  const currentUser = useSelector(selectCurrentUser);\r\n\r\n  //Setup Local State\r\n  // const [expanded, setExpanded] = useState(false);\r\n  const [soilTypeState, setSoilTypeState] = useState([]);\r\n  const [fullJournal, setFullJournal] = useState({\r\n    jName: \"\",\r\n    jDesc: \"\",\r\n    roomType: \"\",\r\n    waterType: \"\",\r\n    vegLight: \"\",\r\n    flowLight: \"\",\r\n    growMedium: \"\",\r\n    vegWatt: \"\",\r\n    flowerWatt: \"\",\r\n    username: currentUser,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSoilTypeState(props.fullSelectedJournal.growMedium);\r\n  }, []);\r\n\r\n  //Updating journals\r\n  // const updateJournal = (event) => {\r\n  //   console.log(\"UPDATE JOURNAL\");\r\n  //   // setFullJournal({ ...fullJournal, [event.target.name]: event.target.value });\r\n  // };\r\n\r\n  const cancelNewJournal = () => {\r\n    // setExpanded(false);\r\n    props.setEditJournal(!props.editJournal);\r\n    props.setDispCarousel(!props.dispCarousel);\r\n    props.setDispWeather(!props.dispWeather);\r\n  };\r\n\r\n  //Journal Data Processing\r\n  //Requesting -  Create new journal on backend\r\n  const updateJournal = async () => {\r\n    console.log(\"Update Journal\");\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        journalNameField: props.fullSelectedJournal.name,\r\n        journalDescField: props.fullSelectedJournal.description,\r\n        journalRoomType: props.fullSelectedJournal.roomType,\r\n        journalWaterType: props.fullSelectedJournal.waterType,\r\n        journalVegLight: props.fullSelectedJournal.vegLight,\r\n        journalFlowLight: props.fullSelectedJournal.flowLight,\r\n        journalGrowMedium: props.fullSelectedJournal.growMedium,\r\n        journalVegWatt: props.fullSelectedJournal.vegWatt,\r\n        journalFlowerWatt: props.fullSelectedJournal.flowerWatt,\r\n        journalId: props.fullSelectedJournal.id,\r\n      }),\r\n    };\r\n    fetch(\"http://localhost:4000/journal/updateJournal\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (response.journalUpdate === \"Success\") {\r\n          props.setEditJournal(!props.editJournal);\r\n          props.setDispCarousel(!props.dispCarousel);\r\n          props.setDispWeather(!props.dispWeather);\r\n        } else {\r\n          console.log(response.journalUpdate);\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  const handleChangeMultiple = (event) => {\r\n    setSoilTypeState(event.target.value);\r\n    props.setFullSelectedJournal({\r\n      ...props.fullSelectedJournal,\r\n      growMedium: event.target.value,\r\n    });\r\n  };\r\n\r\n  const updateState = (event) => {\r\n    props.setFullSelectedJournal({\r\n      ...props.fullSelectedJournal,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent style={{ border: \"0px solid\", padding: \"0\" }}>\r\n        <Grid container direction=\"row\" style={{ width: \"100%\" }}>\r\n          <Grid item className={classes.typogGrid}>\r\n            <Typography\r\n              variant=\"h6\"\r\n              style={{ fontWeight: \"normal\", paddingLeft: \"0.5em\" }}\r\n            >\r\n              Update Journal\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <InputCust\r\n              id={\"newJournalTitle\"}\r\n              label={\"Journal Name\"}\r\n              name={\"name\"}\r\n              helperText={\"\"}\r\n              inputWidth={\"96%\"}\r\n              value={props.fullSelectedJournal.name}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item className={classes.gridItemStyle} xs={6}>\r\n            <SelectCust\r\n              name=\"roomType\"\r\n              label=\"Room Type\"\r\n              labelId=\"watering_type\"\r\n              inputWidth=\"100%\"\r\n              menuArr={Config.roomType}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={props.fullSelectedJournal.roomType}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid item className={classes.gridItemStyle} xs={6}>\r\n            <SelectCust\r\n              name=\"waterType\"\r\n              label=\"Watering Type\"\r\n              labelId=\"watering_type\"\r\n              inputWidth=\"100%\"\r\n              menuArr={Config.waterType}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={props.fullSelectedJournal.waterType}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle}>\r\n            <Grid item xs={6}>\r\n              <InputCust\r\n                id={\"newJournalTitle\"}\r\n                label={\"Veg Wattage\"}\r\n                name={\"vegWatt\"}\r\n                helperText={\"\"}\r\n                inputWidth={\"96%\"}\r\n                value={props.fullSelectedJournal.vegWatt}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                type=\"number\"\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectCust\r\n                name=\"vegLight\"\r\n                label=\"Veg Light Type\"\r\n                inputWidth=\"100%\"\r\n                menuArr={Config.lightType}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                value={props.fullSelectedJournal.vegLight}\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle}>\r\n            <Grid item xs={6}>\r\n              <InputCust\r\n                id={\"newJournalTitle\"}\r\n                label={\"Flower Wattage\"}\r\n                name={\"flowerWatt\"}\r\n                helperText={\"\"}\r\n                inputWidth={\"96%\"}\r\n                value={props.fullSelectedJournal.flowerWatt}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                type=\"number\"\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <SelectCust\r\n                name=\"flowLight\"\r\n                label=\"Flower Light Type\"\r\n                inputWidth=\"100%\"\r\n                menuArr={Config.lightType}\r\n                curState={fullJournal}\r\n                setCurState={setFullJournal}\r\n                value={props.fullSelectedJournal.flowLight}\r\n                onChange={updateState}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item className={classes.gridItemStyle} xs={12}>\r\n            <FormControl\r\n              className={classes.formControl}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <InputLabel id=\"soilTypeLabel\">Grow Medium</InputLabel>\r\n              <Select\r\n                labelId=\"soilTypeLabel\"\r\n                id=\"mutipleChip\"\r\n                multiple\r\n                value={props.fullSelectedJournal.growMedium}\r\n                onChange={handleChangeMultiple}\r\n                input={<Input id=\"selectMultipleChip\" />}\r\n                renderValue={(selected) => (\r\n                  <div className={classes.chips}>\r\n                    {soilTypeState.map((value) => (\r\n                      <Chip\r\n                        key={value}\r\n                        label={value}\r\n                        className={classes.chip}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                MenuProps={MenuProps}\r\n              >\r\n                {Config.soilType.map((soil) => (\r\n                  <MenuItem key={soil} value={soil}>\r\n                    {soil}\r\n                  </MenuItem>\r\n                ))}\r\n                Config.lightType\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item container className={classes.gridItemStyle} xs={12}>\r\n            <InputMultiCust\r\n              name=\"description\"\r\n              inputWidth=\"100%\"\r\n              id={\"entryNote\"}\r\n              label={\"Journal Description\"}\r\n              helperText={\"\"}\r\n              curState={fullJournal}\r\n              setCurState={setFullJournal}\r\n              value={props.fullSelectedJournal.description}\r\n              placeholder=\"Short description of journal...\"\r\n              inputWidth={\"95%\"}\r\n              onChange={updateState}\r\n            />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            className={classes.submitGrid}\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item>\r\n              <ButtonCust\r\n                butName=\"Update\"\r\n                buttonWidth=\"75%\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={updateJournal}\r\n                disabled={\r\n                  props.fullSelectedJournal.name === \"\" ||\r\n                  props.fullSelectedJournal.description === \"\" ||\r\n                  props.fullSelectedJournal.roomType === \"\" ||\r\n                  props.fullSelectedJournal.waterType === \"\" ||\r\n                  props.fullSelectedJournal.vegLight === \"\" ||\r\n                  props.fullSelectedJournal.flowLight === \"\" ||\r\n                  props.fullSelectedJournal.growMedium === \"\" ||\r\n                  props.fullSelectedJournal.vegWatt === \"\" ||\r\n                  props.fullSelectedJournal.flowerWatt === \"\"\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <ButtonCust\r\n                butName=\"Cancel\"\r\n                buttonWidth=\"75%\"\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={cancelNewJournal}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\calanderUi\\calanderEntry.js",[],"C:\\Users\\Ryan.Naude\\Documents\\VSCode\\GrowDashboardFront\\src\\components\\ui\\galleryUi\\galleryChipGroup.js",[],{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":81,"column":5,"nodeType":"195","endLine":81,"endColumn":7,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":1,"column":10,"nodeType":"199","messageId":"200","endLine":1,"endColumn":24},{"ruleId":"197","severity":1,"message":"201","line":3,"column":7,"nodeType":"199","messageId":"200","endLine":3,"endColumn":23},{"ruleId":"189","replacedBy":"202"},{"ruleId":"191","replacedBy":"203"},{"ruleId":"197","severity":1,"message":"204","line":1,"column":8,"nodeType":"199","messageId":"200","endLine":1,"endColumn":23},{"ruleId":"197","severity":1,"message":"204","line":1,"column":8,"nodeType":"199","messageId":"200","endLine":1,"endColumn":23},{"ruleId":"197","severity":1,"message":"205","line":115,"column":10,"nodeType":"199","messageId":"200","endLine":115,"endColumn":18},{"ruleId":"197","severity":1,"message":"206","line":135,"column":9,"nodeType":"199","messageId":"200","endLine":135,"endColumn":22},{"ruleId":"207","severity":1,"message":"208","line":349,"column":15,"nodeType":"209","messageId":"210","endLine":349,"endColumn":33},{"ruleId":"193","severity":1,"message":"211","line":73,"column":6,"nodeType":"195","endLine":73,"endColumn":8,"suggestions":"212"},{"ruleId":"197","severity":1,"message":"213","line":56,"column":23,"nodeType":"199","messageId":"200","endLine":56,"endColumn":37},{"ruleId":"193","severity":1,"message":"214","line":115,"column":6,"nodeType":"195","endLine":115,"endColumn":8,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":123,"column":32,"nodeType":"218","messageId":"219","endLine":123,"endColumn":33},{"ruleId":"193","severity":1,"message":"220","line":132,"column":6,"nodeType":"195","endLine":132,"endColumn":8,"suggestions":"221"},{"ruleId":"207","severity":1,"message":"208","line":361,"column":15,"nodeType":"209","messageId":"210","endLine":361,"endColumn":33},"no-native-reassign",["222"],"no-negated-in-lhs",["223"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'month' and 'year'. Either include them or remove the dependency array.","ArrayExpression",["224"],"no-unused-vars","'createSelector' is defined but never used.","Identifier","unusedVar","'selectNewJournal' is assigned a value but never used.",["222"],["223"],"'userActionTypes' is defined but never used.","'expanded' is assigned a value but never used.","'updateJournal' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has a missing dependency: 'getWeather'. Either include it or remove the dependency array.",["225"],"'setFullJournal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getJournals'. Either include it or remove the dependency array.",["226"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'props.fullSelectedJournal.growMedium'. Either include it or remove the dependency array. If 'setSoilTypeState' needs the current value of 'props.fullSelectedJournal.growMedium', you can also switch to useReducer instead of useState and read 'props.fullSelectedJournal.growMedium' in the reducer.",["227"],"no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [month, year]",{"range":"236","text":"237"},"Update the dependencies array to be: [getWeather]",{"range":"238","text":"239"},"Update the dependencies array to be: [getJournals]",{"range":"240","text":"241"},"Update the dependencies array to be: [props.fullSelectedJournal.growMedium]",{"range":"242","text":"243"},[2223,2225],"[month, year]",[1849,1851],"[getWeather]",[3467,3469],"[getJournals]",[3399,3401],"[props.fullSelectedJournal.growMedium]"]